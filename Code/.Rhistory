month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- dates(paste(year,month,day, sep = "-"), format="Y-M-D")
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
View(obtained.info)
train_clean <- cbind(train_clean[,-59], obtained.info$year, obtained.info$month,
obtained.info$is_holiday, train_clean$popularity)
View(test)
test_clean <- test[, -c(7,51,61) ]
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- dates(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format="Y-M-D")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- dates(paste(year,month,day, sep = "-"), format="Y-M-D")
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
#obtain dates for training set
obtained.info <- obtain.date(train_clean)
#append the new created features
train_clean <- cbind(train_clean[,-59], obtained.info$year, obtained.info$month,
obtained.info$is_holiday, train_clean$popularity)
View(obtained.info)
obtain.date <- function(dataset){
myholidays  <- dates(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format="Y-M-D")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- dates(paste(year,month,day, sep = "-"), format="YYYY-MM-DD")
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
?dates
?as.date
?as.Date
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- dates(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format="Y-M-D")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- as.Date(paste(year,month,day), format="%y/%m/%d")
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
View(obtained.info)
?paste
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- dates(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format="Y-M-D")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- as.Date(paste(year,month,day, sep = "-"), format="%y/%m/%d")
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
#obtain dates for training set
obtained.info <- obtain.date(train_clean)
View(obtained.info)
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- dates(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format="Y-M-D")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date)
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
View(obtained.info)
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- as.Date(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"))
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date)
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
#obtain dates for training set
obtained.info <- obtain.date(train_clean)
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- as.Date(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format ="%Y-%m-%d")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date, format = "%Y-%m-%d")
is_holiday <- is.holiday(as.Date(date),myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- as.Date(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format ="%Y-%m-%d")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date, format = "%Y-%m-%d")
is_holiday <- is.holiday(date,myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
View(obtain.date)
date <- paste(year,month,day)
obtain.date <- function(dataset){
myholidays  <- as.Date(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"), format ="%Y-%m-%d")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day)
date <- as.Date(date, format = "%Y-%m-%d")
is_holiday <- is.holiday(date,myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
myholidays  <- as.Date(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"))
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date)
is_holiday <- is.holiday(date,myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
?is.holiday
setwd("/Users/santhoshnarayanan/Documents/Semester_2/15D012_dv_Computational_Methods/Kaggle_Competition/Kaggle_Competition/Data")
train <- read.csv("news_popularity_training.csv", sep = ",")
test <- read.csv("news_popularity_test.csv", sep = ",")
test$popularity <- NA
dataset <- rbind(train,test)
features <- dataset[,c(4:61)]
labels <- as.factor(dataset$popularity)
library(mice)
library(HotDeckImputation)
# Remove the constant column
features$n_non_stop_words <- NULL
# Remove the ukrain outlier
features <- features[-which(features$n_unique_tokens > 1),]
# Recode the missing values
features$n_unique_tokens[features$n_tokens_content == 0] <- NA
features$n_non_stop_unique_tokens[features$n_tokens_content == 0] <- NA
features$num_hrefs[features$n_tokens_content == 0] <- NA
features$num_self_hrefs[features$n_tokens_content == 0] <- NA
features$average_token_length[features$n_tokens_content == 0] <- NA
features$n_tokens_content[features$n_tokens_content == 0] <- NA
# Recode the missing values
features$global_sentiment_polarity[features$global_subjectivity == 0] <- NA
features$global_rate_positive_words[features$global_subjectivity == 0] <- NA
features$global_rate_negative_words[features$global_subjectivity == 0] <- NA
features$rate_positive_words[features$global_subjectivity == 0] <- NA
features$rate_negative_words[features$global_subjectivity == 0] <- NA
features$avg_positive_polarity[features$global_subjectivity == 0] <- NA
features$avg_negative_polarity[features$global_subjectivity == 0] <- NA
features$min_positive_polarity[features$global_subjectivity == 0] <- NA
features$min_negative_polarity[features$global_subjectivity == 0] <- NA
features$max_positive_polarity[features$global_subjectivity == 0] <- NA
features$max_negative_polarity[features$global_subjectivity == 0] <- NA
features$global_subjectivity[features$global_subjectivity == 0] <- NA
# Hot deck Imputation
imp.features <- impute.NN_HD(DATA=features,distance="eukl")
if(!require("mice")) install.packages("mice"); library(mice)
if(!require("mice")) install.packages("mice"); library(mice)
if(!require("HotDeckImputation")) install.packages("HotDeckImputation"); library(HotDeckImputation)
"2014-12-25"),"%Y-%m-%d")
myholidays  <- format(c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"),"%Y-%m-%d")
myholidays  <- format(dates = c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25"),"%Y-%m-%d")
dates = c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25")
myholidays  <- format(dates,"%Y-%m-%d")
myholidays  <- as.Date(dates,format ="%Y-%m-%d")
if(!require("class")) install.packages("class"); library(class)
if(!require("chron")) install.packages("chron"); library(chron)
#get the data
train <- read.csv("../DATA/news_popularity_training.csv", sep = ",")
test <- read.csv("../DATA/news_popularity_test.csv", sep = ",")
#tables
table(train$popularity)
round(prop.table(table(train$popularity)) * 100, digits = 1)
###############################################################
##DATA MANIPULATION
#transform number of images & videos into 3-categorical variables (0, 1 or more than 1)
three.cat <- function(x){
for(i in 1:length(x)){
if(x[i] > 2) x[i] <- 2
}
return(x)
}
train$num_imgs <- three.cat(train$num_imgs)
train$num_videos <- three.cat(train$num_videos)
#Remove non-sense or redundant features: n-non-stop-words, rate negative_words, abs_title_sent_polarity
train_clean <- train[,-c(7,51,61) ]
test_clean <- test[, -c(7,51,61) ]
#obtain date & holiday variables
#New years, Martin Luther, Washington's Birthday, Memorial day, Independence, labor, Columbus
#Veterans, Thanksgiving, Christmas
obtain.date <- function(dataset){
dates = c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25")
myholidays  <- as.Date(dates,format ="%Y-%m-%d")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date)
is_holiday <- is.holiday(date,myholidays)
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
return(a)
}
obtained.info <- obtain.date(train_clean)
dataset = train.clean
dataset = train_clean
dates = c("2013-01-01","2013-01-21","2013-02-18" , "2013-05-27", "2013-07-04",
"2013-09-02", "2013-10-14", "2013-11-11", "2013-11-28",
"2013-12-25", "2014-01-01", "2014-01-20", "2014-02-17", "2014-05-26",
"2014-07-04", "2014-09-01", "2014-10-13", "2014-11-11", "2014-11-27" ,
"2014-12-25")
myholidays  <- as.Date(dates,format ="%Y-%m-%d")
year <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 21,24))})
month <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 26,27))})
day <- sapply(dataset$url, FUN=function(x) {as.numeric(substring(x, 29,30))})
date <- paste(year,month,day, sep = "-")
date <- as.Date(date)
is_holiday <- is.holiday(date,myholidays)
is_holiday <- which(date %in% myholidays)
is_holiday <- rep(0,length(year))
is_holiday <- rep(0,length(year))
is_holiday[which(date %in% myholidays)] <- 1
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
View(a)
date
a <- as.data.frame(cbind(year,month, day, date, is_holiday))
View(a)
str(a)
a <- as.data.frame(cbind(year,month, day, as.character(date), is_holiday))
View(a)
a <- as.data.frame(cbind(year,month, day, date = as.character(date), is_holiday))
View(a)
